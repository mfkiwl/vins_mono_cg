%YAML:1.0

#common parameters
imu_topic: "/mynteye/imu/data_raw"
image_topic: "/mynteye/left/image_raw"
output_path: "/dev/null"

#camera calibration 
model_type: KANNALA_BRANDT
camera_name: camera
image_width: 752
image_height: 480
projection_parameters:
   k2: -0.018667463648839693
   k3: -0.007213641011744815
   k4: 0.0031810686158049045
   k5: -0.0017356524706004768
   mu: 367.0957192620639
   mv: 367.19159132903894
   u0: 366.0191603533601
   v0: 221.21625754751526    

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 1   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0.000252295802561, -0.999993183191,  -0.00368373713759, 
           0.999988020813,     0.00023428420211, 0.00488910433906, 
          -0.00488820796955,  -0.00368492650992, 0.999981263194 ]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.0034754435914, -0.0438783079456, 0.0241411341267]

#feature traker paprameters
max_cnt: 120            # for cv::goodFeaturesToTrack, max feature number in feature tracking
min_dist: 30            # for cv::goodFeaturesToTrack, min distance between two features
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # for cv::findFundamentalMat, ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0             # for cv::createCLAHE, if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04   # for ceres::Solver::Options, max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # for ceres::Solver::Options, max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.0268014618074          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.00888232829671         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.00262960861593         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 0.000379565782927        # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.81007                 # gravity magnitude

#loop closure parameters
loop_closure: 1                    # start loop closure
fast_relocalization: 1             # useful in real-time and large project
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/tony-ws1/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0.001                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
